daml 1.2
module DA.GenericTypes where

-- Fully generic data record
data GenericDataRecord aaa bbb = GenericDataRecordCtor with first: aaa; middle: bbb, last: Int
    deriving (Eq, Show)

-- Partially applied generic data type
type PartialConcreteDataType ccc = GenericDataRecord (Optional [Int]) ccc

-- Fully applied data type
type ConcreteDataType = PartialConcreteDataType [Text]

-- Generic data which uses a partially applied data type record
data PartialConcreteDataRecord ddd = PartialDataRecordCtor with alpha: PartialConcreteDataType ddd
    deriving (Eq, Show)

-- Concrete data record
data ConcreteDataRecord = ConcreteDataRecordCtor with beta: ConcreteDataType
    deriving (Eq, Show)

-- Fully generic data variant
data GenericVariant qqq = VarBob qqq | VarAlice [qqq]
    deriving (Eq, Show)

-- Fully applied data variant
data ConcreteVariant = ConcreteVarient with conc_param: GenericVariant [Optional Int]
    deriving (Eq, Show)

-- Fully generic data record
data GenericWrapperRecord a = GenericWrapperRecord with value: a
    deriving (Eq, Show)

-- Concrete recursive data variant
data PatternVariant = PEnd | PStart (GenericWrapperRecord PatternVariant)
    deriving (Eq, Show)

-- Concrete recursive data record
data PatternRecord = PatternRecord with val: Optional (GenericWrapperRecord PatternRecord)
    deriving (Eq, Show)

-- Template using generic and concrete data records
template TemplateWithGeneric
  with
    party : Party
    data_x : ConcreteDataType
    data_y : GenericDataRecord Int Text
    data_z : ConcreteDataRecord
    data_q : PatternVariant
  where
    signatory party

name = scenario do
    p <- getParty "party"
    submit p do create TemplateWithGeneric with 
                    party = p
                    data_x = (GenericDataRecordCtor with first = (Some [0]); middle = ["test"]; last = 101)
                    data_y = (GenericDataRecordCtor with first = 0; middle = "boo"; last = 200)
                    data_z = (ConcreteDataRecordCtor with beta = (GenericDataRecordCtor with first = Some [3]; middle = ["hello"]; last = 99))
                    data_q = (PStart (GenericWrapperRecord PEnd))
    assert True