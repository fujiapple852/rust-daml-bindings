module DA.PingPong where

data PingPongKey = PingPongKey
  with
    sender : Party
    count : Int
  deriving (Eq, Show)

data UserData = UserData
  with
    name: Party
    new_value: Int
  deriving (Show, Eq)

template Ping
  with
    sender: Party
    receiver: Party
    count: Int
  where
    signatory sender
    observer receiver
    key PingPongKey with .. : PingPongKey
    maintainer key.sender

    choice RespondPong : ()
      controller receiver
        do
          if count > 10 then return ()
          else do
            create Pong with sender = receiver; receiver = sender; count = count + 1
            return ()

    choice ResetPingCount : () with
       party : Party
     controller sender
        do
          create Ping with sender; receiver; count
          return ()

    choice FromUserData : () with
      new_count: Int
      new_data: UserData
     controller sender
        do
          create Ping with sender; receiver; count = new_count + new_data.new_value
          return ()

template Pong
  with
    sender: Party
    receiver: Party
    count: Int
  where
    signatory sender
    observer receiver
    key PingPongKey with .. : PingPongKey
    maintainer key.sender

    choice RespondPing : ()
     controller receiver
        do
          if count > 10 then return ()
          else do
            create Ping with sender = receiver; receiver = sender; count = count + 1
            return ()

    choice ResetPongCount : () with
       new_count: Int
     controller sender
        do
          create Pong with sender; receiver; count = new_count
          return ()